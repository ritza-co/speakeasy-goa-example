// Code generated by goa v3.13.2, DO NOT EDIT.
//
// order endpoints
//
// Command:
// $ goa gen app/design

package order

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "order" service endpoints.
type Endpoints struct {
	Tea goa.Endpoint
}

// NewEndpoints wraps the methods of the "order" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Tea: NewTeaEndpoint(s),
	}
}

// Use applies the given middleware to all the "order" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Tea = m(e.Tea)
}

// NewTeaEndpoint returns an endpoint function that calls the method "tea" of
// service "order".
func NewTeaEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*TeaPayload)
		return s.Tea(ctx, p)
	}
}
