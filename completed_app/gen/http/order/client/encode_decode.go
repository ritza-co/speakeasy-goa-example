// Code generated by goa v3.13.2, DO NOT EDIT.
//
// order HTTP client encoders and decoders
//
// Command:
// $ goa gen app/design

package client

import (
	order "app/gen/order"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildTeaRequest instantiates a HTTP request object with method and path set
// to call the "order" service "tea" endpoint
func (c *Client) BuildTeaRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TeaOrderPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("order", "tea", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeTeaRequest returns an encoder for requests sent to the order tea
// server.
func EncodeTeaRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*order.TeaPayload)
		if !ok {
			return goahttp.ErrInvalidType("order", "tea", "*order.TeaPayload", v)
		}
		body := NewTeaRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("order", "tea", err)
		}
		return nil
	}
}

// DecodeTeaResponse returns a decoder for responses returned by the order tea
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeTeaResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("order", "tea", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("order", "tea", resp.StatusCode, string(body))
		}
	}
}
