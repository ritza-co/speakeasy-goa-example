// Code generated by goa v3.13.2, DO NOT EDIT.
//
// order gRPC client encoders and decoders
//
// Command:
// $ goa gen app/design

package client

import (
	orderpb "app/gen/grpc/order/pb"
	order "app/gen/order"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildTeaFunc builds the remote method to invoke for "order" service "tea"
// endpoint.
func BuildTeaFunc(grpccli orderpb.OrderClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Tea(ctx, reqpb.(*orderpb.TeaRequest), opts...)
		}
		return grpccli.Tea(ctx, &orderpb.TeaRequest{}, opts...)
	}
}

// EncodeTeaRequest encodes requests sent to order tea endpoint.
func EncodeTeaRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*order.TeaPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("order", "tea", "*order.TeaPayload", v)
	}
	return NewProtoTeaRequest(payload), nil
}

// DecodeTeaResponse decodes responses from the order tea endpoint.
func DecodeTeaResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*orderpb.TeaResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("order", "tea", "*orderpb.TeaResponse", v)
	}
	res := NewTeaResult(message)
	return res, nil
}
