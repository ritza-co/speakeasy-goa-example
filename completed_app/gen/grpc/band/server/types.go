// Code generated by goa v3.13.2, DO NOT EDIT.
//
// band gRPC server types
//
// Command:
// $ goa gen app/design

package server

import (
	band "app/gen/band"
	bandpb "app/gen/grpc/band/pb"

	goa "goa.design/goa/v3/pkg"
)

// NewPlayPayload builds the payload of the "play" endpoint of the "band"
// service from the gRPC request type.
func NewPlayPayload(message *bandpb.PlayRequest) *band.PlayPayload {
	v := &band.PlayPayload{
		Style: message.Style,
	}
	return v
}

// NewProtoPlayResponse builds the gRPC response type from the result of the
// "play" endpoint of the "band" service.
func NewProtoPlayResponse() *bandpb.PlayResponse {
	message := &bandpb.PlayResponse{}
	return message
}

// ValidatePlayRequest runs the validations defined on PlayRequest.
func ValidatePlayRequest(message *bandpb.PlayRequest) (err error) {
	if !(message.Style == "Bebop" || message.Style == "Swing") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.style", message.Style, []any{"Bebop", "Swing"}))
	}
	return
}
