// Code generated with goa v3.13.2, DO NOT EDIT.
//
// band protocol buffer definition
//
// Command:
// $ goa gen app/design

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: goagen_app_band.proto

package bandpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Band_Play_FullMethodName = "/band.Band/Play"
)

// BandClient is the client API for Band service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BandClient interface {
	// Choose your jazz style.
	Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error)
}

type bandClient struct {
	cc grpc.ClientConnInterface
}

func NewBandClient(cc grpc.ClientConnInterface) BandClient {
	return &bandClient{cc}
}

func (c *bandClient) Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error) {
	out := new(PlayResponse)
	err := c.cc.Invoke(ctx, Band_Play_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BandServer is the server API for Band service.
// All implementations must embed UnimplementedBandServer
// for forward compatibility
type BandServer interface {
	// Choose your jazz style.
	Play(context.Context, *PlayRequest) (*PlayResponse, error)
	mustEmbedUnimplementedBandServer()
}

// UnimplementedBandServer must be embedded to have forward compatible implementations.
type UnimplementedBandServer struct {
}

func (UnimplementedBandServer) Play(context.Context, *PlayRequest) (*PlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (UnimplementedBandServer) mustEmbedUnimplementedBandServer() {}

// UnsafeBandServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BandServer will
// result in compilation errors.
type UnsafeBandServer interface {
	mustEmbedUnimplementedBandServer()
}

func RegisterBandServer(s grpc.ServiceRegistrar, srv BandServer) {
	s.RegisterService(&Band_ServiceDesc, srv)
}

func _Band_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BandServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Band_Play_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BandServer).Play(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Band_ServiceDesc is the grpc.ServiceDesc for Band service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Band_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "band.Band",
	HandlerType: (*BandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Play",
			Handler:    _Band_Play_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goagen_app_band.proto",
}
