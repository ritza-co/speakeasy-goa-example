"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Retry = exports.Retries = exports.RetryConfig = exports.BackoffStrategy = void 0;
var axios_1 = require("axios");
var BackoffStrategy = /** @class */ (function () {
    function BackoffStrategy(initialInterval, maxInterval, exponent, maxElapsedTime) {
        this.initialInterval = initialInterval;
        this.maxInterval = maxInterval;
        this.exponent = exponent;
        this.maxElapsedTime = maxElapsedTime;
    }
    return BackoffStrategy;
}());
exports.BackoffStrategy = BackoffStrategy;
var RetryConfig = /** @class */ (function () {
    function RetryConfig(strategy, backoff, retryConnectionErrors) {
        if (retryConnectionErrors === void 0) { retryConnectionErrors = true; }
        this.strategy = strategy;
        this.backoff = backoff;
        this.retryConnectionErrors = retryConnectionErrors;
    }
    return RetryConfig;
}());
exports.RetryConfig = RetryConfig;
var Retries = /** @class */ (function () {
    function Retries(config, statusCodes) {
        this.config = config;
        this.statusCodes = statusCodes;
    }
    return Retries;
}());
exports.Retries = Retries;
var PermanentError = /** @class */ (function (_super) {
    __extends(PermanentError, _super);
    function PermanentError(inner) {
        var _this = _super.call(this, "Permanent error") || this;
        _this.inner = inner;
        Object.setPrototypeOf(_this, PermanentError.prototype);
        return _this;
    }
    return PermanentError;
}(Error));
var TemporaryError = /** @class */ (function (_super) {
    __extends(TemporaryError, _super);
    function TemporaryError(res) {
        var _this = _super.call(this, "Temporary error") || this;
        _this.res = res;
        Object.setPrototypeOf(_this, TemporaryError.prototype);
        return _this;
    }
    return TemporaryError;
}(Error));
function Retry(fn, retries) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    return __awaiter(this, void 0, void 0, function () {
        var _j;
        var _this = this;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _j = retries.config.strategy;
                    switch (_j) {
                        case "backoff": return [3 /*break*/, 1];
                    }
                    return [3 /*break*/, 2];
                case 1: return [2 /*return*/, retryBackoff(function () { return __awaiter(_this, void 0, void 0, function () {
                        var res, err_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, fn()];
                                case 1:
                                    res = _a.sent();
                                    if (isRetryableResponse(res, retries.statusCodes)) {
                                        throw new TemporaryError(res);
                                    }
                                    return [2 /*return*/, res];
                                case 2:
                                    err_1 = _a.sent();
                                    if (err_1 instanceof axios_1.AxiosError) {
                                        if (err_1.response) {
                                            if (isRetryableResponse(err_1.response, retries.statusCodes)) {
                                                throw err_1;
                                            }
                                            throw new PermanentError(err_1);
                                        }
                                        else if (err_1.request) {
                                            throw err_1;
                                        }
                                        else {
                                            throw new PermanentError(err_1);
                                        }
                                    }
                                    else if (err_1 instanceof TemporaryError) {
                                        throw err_1;
                                    }
                                    throw new PermanentError(err_1);
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); }, (_b = (_a = retries.config.backoff) === null || _a === void 0 ? void 0 : _a.initialInterval) !== null && _b !== void 0 ? _b : 500, (_d = (_c = retries.config.backoff) === null || _c === void 0 ? void 0 : _c.maxInterval) !== null && _d !== void 0 ? _d : 60000, (_f = (_e = retries.config.backoff) === null || _e === void 0 ? void 0 : _e.exponent) !== null && _f !== void 0 ? _f : 1.5, (_h = (_g = retries.config.backoff) === null || _g === void 0 ? void 0 : _g.maxElapsedTime) !== null && _h !== void 0 ? _h : 3600000)];
                case 2: return [4 /*yield*/, fn()];
                case 3: return [2 /*return*/, _k.sent()];
            }
        });
    });
}
exports.Retry = Retry;
function isRetryableResponse(res, statusCodes) {
    var e_1, _a;
    try {
        for (var statusCodes_1 = __values(statusCodes), statusCodes_1_1 = statusCodes_1.next(); !statusCodes_1_1.done; statusCodes_1_1 = statusCodes_1.next()) {
            var code = statusCodes_1_1.value;
            if (code.toUpperCase().includes("X")) {
                var codeRange = parseInt(code[0]);
                if (isNaN(codeRange)) {
                    throw new Error("Invalid status code range");
                }
                var s = res.status / 100;
                if (s >= codeRange && s < codeRange + 1) {
                    return true;
                }
            }
            else if (res.status == parseInt(code)) {
                return true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (statusCodes_1_1 && !statusCodes_1_1.done && (_a = statusCodes_1.return)) _a.call(statusCodes_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
}
function retryBackoff(fn, initialInterval, maxInterval, exponent, maxElapsedTime) {
    return __awaiter(this, void 0, void 0, function () {
        var start, x, err_2, now, d;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    start = Date.now();
                    x = 0;
                    _a.label = 1;
                case 1:
                    if (!true) return [3 /*break*/, 7];
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 6]);
                    return [4 /*yield*/, fn()];
                case 3: return [2 /*return*/, _a.sent()];
                case 4:
                    err_2 = _a.sent();
                    if (err_2 instanceof PermanentError) {
                        throw err_2.inner;
                    }
                    now = Date.now();
                    if (now - start > maxElapsedTime) {
                        if (err_2 instanceof TemporaryError) {
                            return [2 /*return*/, err_2.res];
                        }
                        throw err_2;
                    }
                    d = Math.min(initialInterval * Math.pow(x, exponent) + Math.random() * 1000, maxInterval);
                    return [4 /*yield*/, delay(d)];
                case 5:
                    _a.sent();
                    x++;
                    return [3 /*break*/, 6];
                case 6: return [3 /*break*/, 1];
                case 7: return [2 /*return*/];
            }
        });
    });
}
function delay(delay) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve) { return setTimeout(resolve, delay); })];
        });
    });
}
