"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeRequestBody = exports.requestMetadataKey = void 0;
var utils_1 = require("./utils");
var form_data_1 = __importDefault(require("form-data"));
var types_1 = require("../../sdk/types");
var class_transformer_1 = require("class-transformer");
exports.requestMetadataKey = "request";
var mpFormMetadataKey = "multipart_form";
function serializeRequestBody(request, requestFieldName, serializationMethod) {
    if (request !== Object(request) ||
        !request.hasOwnProperty(requestFieldName)) {
        return serializeContentType(utils_1.SerializationMethodToContentType[serializationMethod], request);
    }
    var requestBodyAnn = Reflect.getMetadata(exports.requestMetadataKey, request, requestFieldName);
    if (!requestBodyAnn) {
        throw new Error("invalid request type");
    }
    var requestDecorator = parseRequestDecorator(requestBodyAnn);
    return serializeContentType(requestDecorator.MediaType, request[requestFieldName]);
}
exports.serializeRequestBody = serializeRequestBody;
var serializeContentType = function (contentType, reqBody) {
    var _a, _b, _c;
    var _d = __read([{}, {}], 2), requestHeaders = _d[0], requestBody = _d[1];
    switch (contentType) {
        case "multipart/form-data":
            requestBody = encodeMultipartFormData(reqBody);
            break;
        case "multipart/mixed":
            requestBody = encodeMultipartFormData(reqBody);
            requestHeaders = requestBody.getHeaders();
            break;
        case "application/x-www-form-urlencoded":
            _a = __read([
                { "Content-Type": "".concat(contentType) },
                encodeFormUrlEncodeData(reqBody),
            ], 2), requestHeaders = _a[0], requestBody = _a[1];
            break;
        case "application/json":
            _b = __read([
                { "Content-Type": "".concat(contentType) },
                (0, class_transformer_1.classToPlain)(reqBody, { exposeUnsetFields: false }),
            ], 2), requestHeaders = _b[0], requestBody = _b[1];
            break;
        case "text/json":
            _c = __read([
                { "Content-Type": "".concat(contentType) },
                reqBody,
            ], 2), requestHeaders = _c[0], requestBody = _c[1];
            break;
        default: {
            requestBody = reqBody;
            var requestBodyType = typeof requestBody;
            if (requestBodyType === "string" ||
                requestBody instanceof String ||
                requestBody instanceof Uint8Array)
                requestHeaders = { "Content-Type": "".concat(contentType) };
            else
                throw new Error("invalid request body type ".concat(requestBodyType, " for mediaType ").concat(contentType));
        }
    }
    return [requestHeaders, requestBody];
};
var encodeFormUrlEncodeData = function (data) {
    var formData = new form_data_1.default();
    var fieldNames = Object.getOwnPropertyNames(data);
    if ((0, utils_1.isNumberRecord)(data) || (0, utils_1.isBooleanRecord)(data) || (0, utils_1.isStringRecord)(data)) {
        fieldNames.forEach(function (fname) {
            formData.append(fname, String(data[fname]));
        });
    }
    else {
        fieldNames.forEach(function (fname) {
            var _a;
            var formAnn = Reflect.getMetadata("form", data, fname);
            if (formAnn === null) {
                return;
            }
            var formDecorator = parseFormDecorator(formAnn);
            if (formDecorator.JSON) {
                formData.append((_a = formDecorator.Name) !== null && _a !== void 0 ? _a : fname, JSON.stringify(data[fname]));
                return;
            }
            if (formDecorator.Style === "form") {
                var parsed_1;
                if (formDecorator.Explode === true) {
                    parsed_1 = formExplode(fname, data[fname]);
                }
                else {
                    parsed_1 = formNotExplode(fname, data[fname]);
                }
                Object.keys(parsed_1).forEach(function (key) {
                    parsed_1[key].forEach(function (v) { return formData.append(key, v); });
                });
                return;
            }
        });
    }
    return formData;
};
var formExplode = function (fname, data) {
    var exploded = {};
    if (Array.isArray(data)) {
        data.forEach(function (value) {
            if (!exploded[fname]) {
                exploded[fname] = [];
            }
            exploded[fname].push(value);
        });
    }
    else if (typeof data === "object") {
        if (data instanceof Date || data instanceof types_1.RFCDate) {
            if (!exploded[fname]) {
                exploded[fname] = [];
            }
            exploded[fname].push((0, utils_1.valToString)(data));
        }
        else {
            Object.keys(data).forEach(function (key) {
                if (!exploded[key]) {
                    exploded[key] = [];
                }
                exploded[key].push(data[key]);
            });
        }
    }
    else {
        if (!exploded[fname]) {
            exploded[fname] = [];
        }
        exploded[fname].push((0, utils_1.valToString)(data));
    }
    return exploded;
};
var formNotExplode = function (fname, data) {
    var notExploded = {};
    if (Array.isArray(data)) {
        if (!notExploded[fname]) {
            notExploded[fname] = [];
        }
        notExploded[fname].push(data.map(function (item) { return item.toString(); }).join(","));
    }
    else if (typeof data === "object") {
        if (data instanceof Date || data instanceof types_1.RFCDate) {
            if (!notExploded[fname]) {
                notExploded[fname] = [];
            }
            notExploded[fname].push((0, utils_1.valToString)(data));
        }
        else {
            Object.keys(data).forEach(function (key) {
                if (!notExploded[key]) {
                    notExploded[key] = [];
                }
                notExploded[fname].push("".concat(key, "=").concat(data[key]));
            });
        }
    }
    else {
        if (!notExploded[fname]) {
            notExploded[fname] = [];
        }
        notExploded[fname].push((0, utils_1.valToString)(data));
    }
    return notExploded;
};
function parseFormDecorator(formAnn) {
    var formDecorator = new FormDecorator("", "form", false, false);
    formAnn.split(";").forEach(function (formAnnPart) {
        var _a = __read(formAnnPart.split("="), 2), formKey = _a[0], formVal = _a[1];
        switch (formKey) {
            case "name":
                formDecorator.Name = formVal;
                break;
            case "style":
                formDecorator.Style = formVal;
                break;
            case "explode":
                formDecorator.Explode = formVal === "true";
                break;
            case "json":
                formDecorator.JSON = formVal === "true";
                break;
        }
    });
    return formDecorator;
}
var FormDecorator = /** @class */ (function () {
    function FormDecorator(Name, Style, Explode, JSON) {
        this.Name = Name;
        this.Style = Style;
        this.Explode = Explode;
        this.JSON = JSON;
    }
    return FormDecorator;
}());
function encodeMultipartFormData(form) {
    var formData = new form_data_1.default();
    var fieldNames = Object.getOwnPropertyNames(form);
    fieldNames.forEach(function (fname) {
        var mpFormAnn = Reflect.getMetadata(mpFormMetadataKey, form, fname);
        if (mpFormAnn == null)
            return;
        var mpFormDecorator = parseMultipartFormDecorator(mpFormAnn);
        if (mpFormDecorator.File)
            return encodeMultipartFormDataFile(formData, form[fname]);
        else if (mpFormDecorator.JSON) {
            formData.append(mpFormDecorator.Name, JSON.stringify(form[fname]));
        }
        else {
            if (Array.isArray(form[fname])) {
                form[fname].forEach(function (val) {
                    formData.append(mpFormDecorator.Name + "[]", (0, utils_1.valToString)(val));
                });
            }
            else {
                formData.append(mpFormDecorator.Name, (0, utils_1.valToString)(form[fname]));
            }
        }
    });
    return formData;
}
function encodeMultipartFormDataFile(formData, file) {
    if (typeof file !== "object" || Array.isArray(file) || file == null) {
        throw new Error("invalid type for multipart/form-data file");
    }
    var content = null;
    var fileName = "";
    var mpFormDecoratorName = "";
    var fieldNames = Object.getOwnPropertyNames(file);
    fieldNames.forEach(function (fname) {
        var mpFormAnn = Reflect.getMetadata(mpFormMetadataKey, file, fname);
        if (mpFormAnn == null)
            return;
        var mpFormDecorator = parseMultipartFormDecorator(mpFormAnn);
        if (!mpFormDecorator.Content && mpFormDecorator.Name == "")
            return;
        if (mpFormDecorator.Content)
            content = file[fname];
        else {
            mpFormDecoratorName = mpFormDecorator.Name;
            fileName = file[fname];
        }
    });
    if (mpFormDecoratorName === "" || fileName === "" || content == null) {
        throw new Error("invalid multipart/form-data file");
    }
    formData.append(mpFormDecoratorName, Buffer.from(content), fileName);
    return formData;
}
function parseMultipartFormDecorator(mpFormAnn) {
    // example "name=file"
    var mpFormDecorator = new MultipartFormDecorator(false, false, false, "");
    mpFormAnn.split(";").forEach(function (mpFormAnnPart) {
        var _a = __read(mpFormAnnPart.split("="), 2), mpFormKey = _a[0], mpFormVal = _a[1];
        switch (mpFormKey) {
            case "file":
                mpFormDecorator.File = mpFormVal == "true";
                break;
            case "content":
                mpFormDecorator.Content = mpFormVal == "true";
                break;
            case "name":
                mpFormDecorator.Name = mpFormVal;
                break;
            case "json":
                mpFormDecorator.JSON = mpFormVal == "true";
                break;
        }
    });
    return mpFormDecorator;
}
var MultipartFormDecorator = /** @class */ (function () {
    function MultipartFormDecorator(File, Content, JSON, Name) {
        this.File = File;
        this.Content = Content;
        this.JSON = JSON;
        this.Name = Name;
    }
    return MultipartFormDecorator;
}());
function parseRequestDecorator(requestAnn) {
    // example "media_type=multipart/form-data"
    var requestDecorator = new RequestDecorator("application/octet-stream");
    var _a = __read(requestAnn.split("="), 2), mediaTypeKey = _a[0], mediaTypeVal = _a[1];
    if (mediaTypeKey === "media_type")
        requestDecorator.MediaType = mediaTypeVal;
    return requestDecorator;
}
var RequestDecorator = /** @class */ (function () {
    function RequestDecorator(MediaType) {
        this.MediaType = MediaType;
    }
    return RequestDecorator;
}());
