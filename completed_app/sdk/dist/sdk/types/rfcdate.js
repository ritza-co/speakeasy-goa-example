"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RFCDate = void 0;
var RFCDate = /** @class */ (function () {
    function RFCDate(date) {
        if (!date) {
            this.date = new Date();
            return;
        }
        if (typeof date === "string") {
            this.date = new Date(date);
            return;
        }
        if (date instanceof Date) {
            this.date = date;
            return;
        }
        var anyDate = date;
        if (date && !!anyDate.date) {
            this.date = new Date(anyDate.date);
        }
    }
    RFCDate.prototype.getDate = function () {
        return this.date;
    };
    RFCDate.prototype.toJSON = function () {
        return this.toString();
    };
    RFCDate.prototype.toString = function () {
        var dateRegex = /^(\d{4})-(\d{2})-(\d{2})/;
        var matches = this.date.toISOString().match(dateRegex);
        if (matches == null) {
            throw new Error("Date format is not valid");
        }
        var _a = __read(matches, 4), year = _a[1], month = _a[2], day = _a[3];
        return "".concat(year, "-").concat(month, "-").concat(day);
    };
    return RFCDate;
}());
exports.RFCDate = RFCDate;
