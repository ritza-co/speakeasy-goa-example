// Code generated by goa v3.13.2, DO NOT EDIT.
//
// order gRPC server
//
// Command:
// $ goa gen app/design

package server

import (
	orderpb "app/gen/grpc/order/pb"
	order "app/gen/order"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the orderpb.OrderServer interface.
type Server struct {
	TeaH goagrpc.UnaryHandler
	orderpb.UnimplementedOrderServer
}

// New instantiates the server struct with the order service endpoints.
func New(e *order.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		TeaH: NewTeaHandler(e.Tea, uh),
	}
}

// NewTeaHandler creates a gRPC handler which serves the "order" service "tea"
// endpoint.
func NewTeaHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeTeaRequest, EncodeTeaResponse)
	}
	return h
}

// Tea implements the "Tea" method in orderpb.OrderServer interface.
func (s *Server) Tea(ctx context.Context, message *orderpb.TeaRequest) (*orderpb.TeaResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "tea")
	ctx = context.WithValue(ctx, goa.ServiceKey, "order")
	resp, err := s.TeaH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*orderpb.TeaResponse), nil
}
